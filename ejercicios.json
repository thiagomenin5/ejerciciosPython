{
  "modulos": [
    {
      "nombre": "Módulo 2 - Estructuras de Datos en Python",
      "descripcion": "Configuración del entorno, estructuras de datos (strings, listas, tuplas, conjuntos y diccionarios)",
      "temas": [
        {
          "nombre": "Strings (Cadenas)",
          "teoria": "Los strings son secuencias de caracteres. Puedes concatenarlos, obtener su longitud, y usar métodos como upper(), lower(), split().",
          "ejercicios": [
            {
              "enunciado": "Crea una variable llamada 'saludo' y asígnale el texto 'Hola'. Recuerda que los textos en Python van entre comillas simples (') o dobles (\"). Para crear una variable, escribe el nombre de la variable, luego el signo igual (=) y finalmente el valor entre comillas. Por ejemplo: mi_variable = 'mi texto'.",
              "test": "saludo == 'Hola'"
            },
            {
              "enunciado": "Crea una variable llamada 'nombre' con tu nombre (por ejemplo 'Ana') y luego crea otra variable llamada 'mensaje' que contenga 'Hola ' seguido de tu nombre. Usa el operador + para unir (concatenar) los textos. La concatenación es cuando juntas dos o más textos. Por ejemplo: texto1 = 'Hola'; texto2 = 'Mundo'; resultado = texto1 + ' ' + texto2; # resultado será 'Hola Mundo'.",
              "test": "mensaje == 'Hola ' + nombre"
            },
            {
              "enunciado": "Crea una variable llamada 'frase' con el texto 'python es divertido' y luego crea otra variable llamada 'longitud' que contenga cuántos caracteres tiene esa frase. Usa la función len() para obtener la longitud. La función len() cuenta todos los caracteres en un texto, incluyendo espacios. Por ejemplo: len('hola') devuelve 4, len('hola mundo') devuelve 10 (incluyendo el espacio).",
              "test": "frase == 'python es divertido' and longitud == len(frase)"
            },
            {
              "enunciado": "Usando la variable 'frase' que creaste antes, crea una nueva variable llamada 'frase_mayus' que contenga la misma frase pero en mayúsculas. Usa el método .upper() para convertir a mayúsculas. Los métodos son funciones que se aplican a un texto usando un punto (.). Por ejemplo: texto = 'hola'; texto_mayus = texto.upper(); # texto_mayus será 'HOLA'.",
              "test": "frase_mayus == frase.upper()"
            },
            {
              "enunciado": "Crea una variable llamada 'palabras' con el texto 'uno,dos,tres' y luego crea una lista llamada 'lista_palabras' que contenga cada palabra separada. Usa el método .split(',') para dividir el texto por las comas. El método .split() divide un texto en una lista usando un separador. Por ejemplo: 'a,b,c'.split(',') devuelve ['a', 'b', 'c']. Las listas van entre corchetes [] y los elementos se separan con comas.",
              "test": "palabras == 'uno,dos,tres' and lista_palabras == palabras.split(',')"
            },
            {
              "enunciado": "Usando la variable 'frase' que creaste antes, crea una nueva variable llamada 'nueva_frase' donde hayas reemplazado la palabra 'divertido' por 'genial'. Usa el método .replace('palabra_vieja', 'palabra_nueva'). El método .replace() cambia una parte del texto por otra. Por ejemplo: 'hola mundo'.replace('mundo', 'amigo') devuelve 'hola amigo'. El texto original no se modifica, se crea uno nuevo.",
              "test": "nueva_frase == frase.replace('divertido', 'genial')"
            },
            {
              "enunciado": "Usando la variable 'frase' que creaste antes, crea una variable llamada 'contiene_python' que sea True si la palabra 'python' está en la frase, o False si no está. Usa el operador 'in' para verificar si una palabra está contenida en un texto. El operador 'in' devuelve True si encuentra la palabra en el texto, False si no la encuentra. Por ejemplo: 'hola' in 'hola mundo' devuelve True, 'adios' in 'hola mundo' devuelve False.",
              "test": "contiene_python == ('python' in frase)"
            },
            {
              "enunciado": "Crea una variable llamada 'texto' con el valor '  hola mundo  ' (con espacios al principio y al final). Luego crea una variable llamada 'texto_limpio' que contenga el mismo texto pero sin los espacios del principio y del final. Usa el método .strip() para eliminar espacios. El método .strip() elimina espacios en blanco al inicio y al final de un texto. Por ejemplo: '  hola  '.strip() devuelve 'hola'. Es útil para limpiar datos que vienen con espacios extra.",
              "test": "texto_limpio == texto.strip()"
            },
            {
              "enunciado": "Crea una función llamada 'contar_letra' que reciba dos parámetros: un texto (string) y una letra (string). La función debe devolver cuántas veces aparece esa letra en el texto. Por ejemplo, contar_letra('banana', 'a') debe devolver 3. Para crear una función usa 'def' seguido del nombre de la función y los parámetros entre paréntesis. Usa un bucle 'for' para recorrer cada letra del texto y un contador para llevar la cuenta. Recuerda usar 'return' para devolver el resultado.",
              "test": "contar_letra('banana', 'a') == 3"
            },
            {
              "enunciado": "Crea una función llamada 'es_palindromo' que reciba un texto (string) y devuelva True si es un palíndromo, o False si no lo es. Un palíndromo es una palabra que se lee igual al derecho y al revés (como 'reconocer', 'ana', 'oso'). La función debe ignorar mayúsculas y minúsculas. Para resolver esto: 1) Convierte el texto a minúsculas con .lower(), 2) Compara el texto original con el texto al revés usando [::-1] (esto invierte el texto), 3) Si son iguales, es un palíndromo.",
              "test": "es_palindromo('reconocer') == True and es_palindromo('python') == False"
            }
          ]
        },
        {
          "nombre": "Listas",
          "teoria": "Las listas son colecciones ordenadas y mutables. Puedes agregar, quitar, modificar elementos y usar métodos como append(), remove(), sort().",
          "ejercicios": [
            {
              "enunciado": "Crea una lista llamada 'numeros' que contenga los valores 1, 2 y 3. Recuerda que las listas en Python van entre corchetes [] y los elementos se separan con comas. Las listas son colecciones ordenadas que pueden contener diferentes tipos de datos. Por ejemplo: mi_lista = [1, 'hola', 3.14, True]. En este caso, queremos una lista con solo números enteros.",
              "test": "numeros == [1, 2, 3]"
            },
            {
              "enunciado": "Usando la lista 'numeros' que creaste antes, agrega el número 4 al final de la lista. Usa el método .append() para agregar un elemento al final de una lista. El método .append() agrega un elemento al final de la lista. Por ejemplo: mi_lista = [1, 2]; mi_lista.append(3); # ahora mi_lista es [1, 2, 3]. El método modifica la lista original.",
              "test": "numeros[-1] == 4 and len(numeros) == 4"
            },
            {
              "enunciado": "Usando la lista 'numeros' que tienes, elimina el primer elemento (el que está en la posición 0) de la lista. Usa el método .pop(0) para eliminar y obtener el primer elemento. El método .pop(índice) elimina y devuelve el elemento en la posición especificada. Por ejemplo: mi_lista = [1, 2, 3]; elemento = mi_lista.pop(0); # elemento será 1, mi_lista será [2, 3]. En Python, las posiciones empiezan en 0.",
              "test": "len(numeros) == 3 and 1 not in numeros"
            },
            {
              "enunciado": "Crea una lista llamada 'frutas' con los valores 'manzana', 'banana' y 'naranja'. Luego elimina 'banana' de la lista usando el método .remove('elemento_a_eliminar'). El método .remove() elimina la primera aparición de un elemento específico de la lista. Por ejemplo: mi_lista = [1, 2, 2, 3]; mi_lista.remove(2); # mi_lista será [1, 2, 3] (solo elimina el primer 2).",
              "test": "frutas == ['manzana', 'naranja']"
            },
            {
              "enunciado": "Crea una lista llamada 'temperaturas' con los valores 25, 30, 15 y 20. Luego ordena la lista de menor a mayor usando el método .sort(). Este método modifica la lista original. El método .sort() ordena los elementos de la lista de menor a mayor. Por ejemplo: mi_lista = [3, 1, 4, 2]; mi_lista.sort(); # mi_lista será [1, 2, 3, 4]. El método no devuelve nada, solo modifica la lista.",
              "test": "temperaturas == [15, 20, 25, 30]"
            },
            {
              "enunciado": "Crea una lista llamada 'pares' que contenga todos los números pares del 2 al 10 (incluyendo el 10). Usa la función list() con range(2, 11, 2) para crear la secuencia de números pares. La función range(inicio, fin, paso) crea una secuencia de números. El tercer parámetro (paso) indica de cuánto en cuánto contar. Por ejemplo: list(range(0, 10, 2)) crea [0, 2, 4, 6, 8].",
              "test": "pares == [2, 4, 6, 8, 10]"
            },
            {
              "enunciado": "Crea una lista llamada 'cuadrados' que contenga los cuadrados de los números del 1 al 5. Usa comprensión de listas: [x**2 for x in range(1, 6)]. Esto significa: para cada número x del 1 al 5, calcula x al cuadrado. La comprensión de listas es una forma corta de crear listas. La sintaxis es [expresión for variable in secuencia]. Por ejemplo: [x*2 for x in [1,2,3]] crea [2, 4, 6]. El operador ** es para potencias: 2**3 = 8.",
              "test": "cuadrados == [1, 4, 9, 16, 25]"
            },
            {
              "enunciado": "Crea una función llamada 'sumar_lista' que reciba una lista de números como parámetro y devuelva la suma de todos sus elementos. Si la lista está vacía, debe devolver 0. Usa la función sum() para sumar los elementos. La función sum() suma todos los elementos de una lista de números. Por ejemplo: sum([1, 2, 3]) devuelve 6. También puedes usar un bucle 'for' para sumar manualmente: total = 0; for numero in lista: total += numero.",
              "test": "sumar_lista([1,2,3]) == 6 and sumar_lista([]) == 0"
            },
            {
              "enunciado": "Crea una función llamada 'invertir_lista' que reciba una lista como parámetro y devuelva una nueva lista con los elementos en orden inverso. Por ejemplo, si recibe [1,2,3], debe devolver [3,2,1]. Usa el método .reverse() o slicing [::-1]. El slicing [::-1] crea una copia invertida de la lista. Por ejemplo: [1,2,3][::-1] devuelve [3,2,1]. El método .reverse() modifica la lista original, pero puedes usar list(reversed(mi_lista)) para crear una nueva lista invertida.",
              "test": "invertir_lista([1,2,3]) == [3,2,1]"
            },
            {
              "enunciado": "Crea una función llamada 'eliminar_duplicados' que reciba una lista como parámetro y devuelva una nueva lista sin elementos duplicados, manteniendo el orden original. Por ejemplo, si recibe [1,2,2,3,1,4], debe devolver [1,2,3,4]. Puedes usar un bucle 'for' para recorrer la lista y agregar solo los elementos que no estén ya en la nueva lista. También puedes usar list(dict.fromkeys(mi_lista)) que es más eficiente, o convertir a conjunto y de vuelta a lista: list(set(mi_lista)), pero esto no mantiene el orden.",
              "test": "eliminar_duplicados([1,2,2,3,1,4]) == [1,2,3,4]"
            }
          ]
        },
        {
          "nombre": "Tuplas",
          "teoria": "Las tuplas son colecciones ordenadas e inmutables. Una vez creadas, no puedes modificar sus elementos. Se usan para datos que no cambian.",
          "ejercicios": [
            {
              "enunciado": "Crea una tupla llamada 'coordenadas' que contenga los valores 1 y 2. Recuerda que las tuplas en Python van entre paréntesis () y los elementos se separan con comas. Las tuplas son inmutables (no se pueden modificar después de crearlas). Las tuplas son como listas pero no se pueden cambiar. Por ejemplo: mi_tupla = (1, 2, 3). Una vez creada, no puedes agregar, eliminar o cambiar elementos.",
              "test": "coordenadas == (1, 2) and isinstance(coordenadas, tuple)"
            },
            {
              "enunciado": "Crea una tupla llamada 'colores' con los valores 'rojo', 'verde' y 'azul'. Luego crea una variable llamada 'primer_color' que contenga el primer elemento de la tupla (el que está en la posición 0). Usa índices para acceder a los elementos: tupla[0]. Los índices te permiten acceder a elementos específicos. En Python, las posiciones empiezan en 0. Por ejemplo: mi_tupla = (1, 2, 3); primer = mi_tupla[0]; # primer será 1.",
              "test": "colores == ('rojo', 'verde', 'azul') and primer_color == colores[0]"
            },
            {
              "enunciado": "Crea una tupla llamada 'persona' que contenga tu nombre (como string) y tu edad (como número). Luego desempaqueta la tupla en dos variables llamadas 'nombre' y 'edad'. El desempaquetado se hace así: nombre, edad = persona. El desempaquetado permite asignar cada elemento de una tupla a una variable diferente. Por ejemplo: mi_tupla = (1, 2); a, b = mi_tupla; # a será 1, b será 2. Es una forma rápida de extraer valores de una tupla.",
              "test": "isinstance(persona, tuple) and len(persona) == 2 and nombre == persona[0] and edad == persona[1]"
            },
            {
              "enunciado": "Crea una tupla llamada 'numeros' que contenga los valores del 1 al 5. Usa la función tuple() con range(1, 6) para crear la tupla. Esto convierte el rango de números en una tupla. La función tuple() convierte cualquier secuencia en una tupla. Por ejemplo: tuple([1, 2, 3]) devuelve (1, 2, 3). range(1, 6) crea una secuencia del 1 al 5 (el 6 no se incluye).",
              "test": "numeros == (1, 2, 3, 4, 5)"
            },
            {
              "enunciado": "Crea una función llamada 'invertir_tupla' que reciba una tupla como parámetro y devuelva una nueva tupla con los elementos en orden inverso. Por ejemplo, si recibe (1,2,3), debe devolver (3,2,1). Usa slicing [::-1] para invertir. El slicing [::-1] funciona igual que en las listas. Por ejemplo: (1,2,3)[::-1] devuelve (3,2,1). También puedes usar tuple(reversed(mi_tupla)) para crear una nueva tupla invertida.",
              "test": "invertir_tupla((1,2,3)) == (3,2,1)"
            },
            {
              "enunciado": "Crea una función llamada 'contar_elemento' que reciba una tupla y un elemento como parámetros, y devuelva cuántas veces aparece ese elemento en la tupla. Por ejemplo, contar_elemento((1,2,2,3), 2) debe devolver 2. Puedes usar el método .count() de las tuplas: mi_tupla.count(elemento). También puedes usar un bucle 'for' para contar manualmente: contador = 0; for item in tupla: if item == elemento: contador += 1.",
              "test": "contar_elemento((1,2,2,3),2) == 2"
            },
            {
              "enunciado": "Crea una función llamada 'concatenar_tuplas' que reciba dos tuplas como parámetros y devuelva una nueva tupla que contenga todos los elementos de ambas tuplas. Por ejemplo, concatenar_tuplas((1,2), (3,4)) debe devolver (1,2,3,4). Usa el operador + para concatenar tuplas. El operador + une dos tuplas en una sola. Por ejemplo: (1,2) + (3,4) devuelve (1,2,3,4). Es similar a concatenar strings o listas.",
              "test": "concatenar_tuplas((1,2),(3,4)) == (1,2,3,4)"
            },
            {
              "enunciado": "Crea una función llamada 'maximo_tupla' que reciba una tupla de números como parámetro y devuelva el valor máximo de la tupla. Por ejemplo, maximo_tupla((1,5,3)) debe devolver 5. Usa la función max() para encontrar el máximo. La función max() devuelve el valor más grande de una secuencia. Por ejemplo: max([1, 5, 3]) devuelve 5. También puedes usar un bucle 'for' para encontrar el máximo manualmente.",
              "test": "maximo_tupla((1,5,3)) == 5"
            },
            {
              "enunciado": "Crea una función llamada 'buscar_indice' que reciba una tupla y un elemento como parámetros, y devuelva el índice de la primera aparición de ese elemento en la tupla. Si el elemento no está en la tupla, debe devolver -1. Usa el método .index() o un bucle. El método .index() devuelve la posición de la primera aparición de un elemento. Por ejemplo: (1,2,3).index(2) devuelve 1. Si el elemento no existe, lanza un error, por eso necesitas manejar esa excepción o usar un bucle 'for' con enumerate().",
              "test": "buscar_indice((1,2,3,2),2) == 1 and buscar_indice((1,2,3),5) == -1"
            },
            {
              "enunciado": "Crea una función llamada 'tupla_sin_duplicados' que reciba una tupla como parámetro y devuelva una nueva tupla sin elementos duplicados, manteniendo el orden original. Por ejemplo, si recibe (1,2,2,3,1,4), debe devolver (1,2,3,4). Puedes usar un bucle 'for' para recorrer la tupla y agregar solo los elementos que no estén ya en la nueva tupla. También puedes convertir a conjunto y de vuelta a tupla: tuple(set(mi_tupla)), pero esto no mantiene el orden original.",
              "test": "tupla_sin_duplicados((1,2,2,3,1,4)) == (1,2,3,4)"
            }
          ]
        },
        {
          "nombre": "Conjuntos",
          "teoria": "Los conjuntos son colecciones no ordenadas de elementos únicos. No permiten duplicados y son útiles para operaciones de conjunto como unión, intersección.",
          "ejercicios": [
            {
              "enunciado": "Crea un conjunto llamado 'vocales' que contenga las letras 'a', 'e', 'i', 'o' y 'u'. Recuerda que los conjuntos en Python van entre llaves {} y los elementos se separan con comas. Los conjuntos no permiten elementos duplicados. Los conjuntos son colecciones de elementos únicos. Por ejemplo: mi_conjunto = {1, 2, 3}. Si intentas agregar un elemento que ya existe, no se duplica. Los conjuntos no mantienen un orden específico.",
              "test": "vocales == {'a', 'e', 'i', 'o', 'u'} and isinstance(vocales, set)"
            },
            {
              "enunciado": "Crea un conjunto llamado 'numeros' a partir de la lista [1, 2, 2, 3, 4, 4, 5]. Usa la función set() para convertir la lista en un conjunto. Observa que los duplicados (2 y 4) se eliminan automáticamente. La función set() convierte cualquier secuencia en un conjunto, eliminando automáticamente los duplicados. Por ejemplo: set([1, 2, 2, 3]) devuelve {1, 2, 3}. Es una forma rápida de eliminar duplicados de una lista.",
              "test": "numeros == {1,2,3,4,5}"
            },
            {
              "enunciado": "Usando el conjunto 'numeros' que creaste antes, agrega el número 6 al conjunto. Usa el método .add() para agregar un elemento a un conjunto. El método .add() agrega un elemento al conjunto. Por ejemplo: mi_conjunto = {1, 2}; mi_conjunto.add(3); # ahora mi_conjunto es {1, 2, 3}. Si intentas agregar un elemento que ya existe, no pasa nada.",
              "test": "6 in numeros"
            },
            {
              "enunciado": "Usando el conjunto 'numeros' que tienes, elimina el número 2 del conjunto. Usa el método .remove() para eliminar un elemento de un conjunto. El método .remove() elimina un elemento específico del conjunto. Por ejemplo: mi_conjunto = {1, 2, 3}; mi_conjunto.remove(2); # ahora mi_conjunto es {1, 3}. Si el elemento no existe, lanza un error. También puedes usar .discard() que no lanza error si el elemento no existe.",
              "test": "2 not in numeros"
            },
            {
              "enunciado": "Crea dos conjuntos llamados 'set1' y 'set2' con algunos números. Luego crea una variable llamada 'union' que contenga la unión de ambos conjuntos (todos los elementos que están en cualquiera de los dos conjuntos). Usa el método .union(). La unión de dos conjuntos contiene todos los elementos que están en cualquiera de los dos conjuntos. Por ejemplo: {1,2}.union({2,3}) devuelve {1,2,3}. También puedes usar el operador |: set1 | set2.",
              "test": "union == set1.union(set2)"
            },
            {
              "enunciado": "Usando los conjuntos 'set1' y 'set2' que creaste antes, crea una variable llamada 'interseccion' que contenga la intersección de ambos conjuntos (solo los elementos que están en ambos conjuntos). Usa el método .intersection(). La intersección de dos conjuntos contiene solo los elementos que están en ambos conjuntos. Por ejemplo: {1,2,3}.intersection({2,3,4}) devuelve {2,3}. También puedes usar el operador &: set1 & set2.",
              "test": "interseccion == set1.intersection(set2)"
            },
            {
              "enunciado": "Crea una función llamada 'diferencia_conjuntos' que reciba dos conjuntos como parámetros y devuelva la diferencia entre el primer conjunto y el segundo (elementos que están en el primero pero no en el segundo). Por ejemplo, diferencia_conjuntos({1,2,3}, {2,3}) debe devolver {1}. La diferencia de conjuntos contiene elementos que están en el primer conjunto pero no en el segundo. Por ejemplo: {1,2,3}.difference({2,3}) devuelve {1}. También puedes usar el operador -: set1 - set2.",
              "test": "diferencia_conjuntos({1,2,3},{2,3}) == {1}"
            },
            {
              "enunciado": "Crea una función llamada 'es_subconjunto' que reciba dos conjuntos como parámetros y devuelva True si el primer conjunto es un subconjunto del segundo (todos los elementos del primero están en el segundo), o False si no lo es. Usa el método .issubset(). Un subconjunto es un conjunto cuyos elementos están todos contenidos en otro conjunto. Por ejemplo: {1,2}.issubset({1,2,3}) devuelve True, pero {1,4}.issubset({1,2,3}) devuelve False. También puedes usar el operador <=: set1 <= set2.",
              "test": "es_subconjunto({1,2},{1,2,3}) == True and es_subconjunto({1,4},{1,2,3}) == False"
            },
            {
              "enunciado": "Crea una función llamada 'conjunto_sin_vocales' que reciba un texto (string) como parámetro y devuelva un conjunto con todas las letras del texto que NO son vocales. Por ejemplo, conjunto_sin_vocales('hola') debe devolver {'h', 'l'}. Usa el operador 'in' para verificar si una letra es vocal. Primero crea un conjunto con las vocales: vocales = {'a', 'e', 'i', 'o', 'u'}. Luego recorre cada letra del texto y agrega al conjunto solo las que no están en vocales. Usa un bucle 'for' para recorrer el texto.",
              "test": "conjunto_sin_vocales('hola') == set('hl')"
            },
            {
              "enunciado": "Crea una función llamada 'tamanio_conjunto' que reciba un conjunto como parámetro y devuelva cuántos elementos tiene el conjunto. Por ejemplo, tamanio_conjunto({1,2,3}) debe devolver 3. Usa la función len() para obtener el tamaño. La función len() funciona igual con conjuntos que con listas y tuplas. Por ejemplo: len({1, 2, 3}) devuelve 3. También puedes usar un bucle 'for' para contar manualmente: contador = 0; for elemento in conjunto: contador += 1.",
              "test": "tamanio_conjunto({1,2,3}) == 3"
            }
          ]
        },
        {
          "nombre": "Diccionarios",
          "teoria": "Los diccionarios almacenan pares clave-valor. Son útiles para representar datos estructurados y permiten acceso rápido por clave.",
          "ejercicios": [
            {
              "enunciado": "Crea un diccionario llamado 'persona' que contenga dos pares clave-valor: 'nombre' con un valor (por ejemplo 'Juan') y 'edad' con un número (por ejemplo 25). Recuerda que los diccionarios en Python van entre llaves {} y cada par clave-valor se separa con comas. Los diccionarios almacenan pares de clave-valor. La sintaxis es: {'clave1': valor1, 'clave2': valor2}. Por ejemplo: mi_dict = {'nombre': 'Ana', 'edad': 30}. Las claves deben ser únicas y pueden ser strings, números o tuplas.",
              "test": "isinstance(persona, dict) and 'nombre' in persona and 'edad' in persona"
            },
            {
              "enunciado": "Usando el diccionario 'persona' que creaste antes, agrega una nueva clave llamada 'ciudad' con un valor (por ejemplo 'Madrid'). Para agregar una nueva clave a un diccionario, simplemente asigna un valor: diccionario['nueva_clave'] = valor. Para agregar o modificar elementos en un diccionario, usa la sintaxis: diccionario[clave] = valor. Por ejemplo: mi_dict = {'a': 1}; mi_dict['b'] = 2; # ahora mi_dict es {'a': 1, 'b': 2}.",
              "test": "'ciudad' in persona"
            },
            {
              "enunciado": "Usando el diccionario 'persona' que tienes, modifica el valor de la clave 'edad' por un número diferente. Para modificar un valor en un diccionario, usa: diccionario['clave'] = nuevo_valor. Modificar un valor es igual que agregar uno nuevo. Si la clave ya existe, se actualiza el valor. Por ejemplo: mi_dict = {'edad': 25}; mi_dict['edad'] = 26; # ahora mi_dict es {'edad': 26}.",
              "test": "persona['edad'] != None"
            },
            {
              "enunciado": "Usando el diccionario 'persona' que tienes, elimina la clave 'ciudad' del diccionario. Usa el método .pop('clave') o la palabra clave 'del' para eliminar una clave: del diccionario['clave']. El método .pop() elimina la clave y devuelve su valor. Por ejemplo: mi_dict = {'a': 1, 'b': 2}; valor = mi_dict.pop('a'); # valor será 1, mi_dict será {'b': 2}. La palabra 'del' solo elimina: del mi_dict['a'].",
              "test": "'ciudad' not in persona"
            },
            {
              "enunciado": "Crea una función llamada 'obtener_claves' que reciba un diccionario como parámetro y devuelva una lista con todas las claves del diccionario. Por ejemplo, obtener_claves({'a':1, 'b':2}) debe devolver ['a', 'b']. Usa el método .keys() o la función list() con .keys(). El método .keys() devuelve un objeto con todas las claves del diccionario. Para convertirlo a lista, usa list(): list(mi_dict.keys()). Por ejemplo: {'a': 1, 'b': 2}.keys() devuelve dict_keys(['a', 'b']), y list({'a': 1, 'b': 2}.keys()) devuelve ['a', 'b'].",
              "test": "set(obtener_claves({'a':1,'b':2})) == {'a','b'}"
            },
            {
              "enunciado": "Crea una función llamada 'obtener_valores' que reciba un diccionario como parámetro y devuelva una lista con todos los valores del diccionario. Por ejemplo, obtener_valores({'a':1, 'b':2}) debe devolver [1, 2]. Usa el método .values() o la función list() con .values(). El método .values() devuelve un objeto con todos los valores del diccionario. Para convertirlo a lista, usa list(): list(mi_dict.values()). Por ejemplo: {'a': 1, 'b': 2}.values() devuelve dict_values([1, 2]), y list({'a': 1, 'b': 2}.values()) devuelve [1, 2].",
              "test": "set(obtener_valores({'a':1,'b':2})) == {1,2}"
            },
            {
              "enunciado": "Crea una función llamada 'invertir_diccionario' que reciba un diccionario como parámetro y devuelva un nuevo diccionario donde las claves y valores estén intercambiados. Por ejemplo, invertir_diccionario({'a':1, 'b':2}) debe devolver {1:'a', 2:'b'}. Ten en cuenta que esto solo funciona si todos los valores son únicos. Para invertir un diccionario, recorre todos los pares clave-valor y crea un nuevo diccionario donde la clave sea el valor original y el valor sea la clave original. Usa un bucle 'for' con .items(): for clave, valor in mi_dict.items():.",
              "test": "invertir_diccionario({'a':1,'b':2}) == {1:'a',2:'b'}"
            },
            {
              "enunciado": "Crea una función llamada 'actualizar_diccionario' que reciba dos diccionarios como parámetros y actualice el primer diccionario con todos los pares clave-valor del segundo diccionario. Usa el método .update() para actualizar un diccionario con otro. El método .update() agrega todos los pares clave-valor del segundo diccionario al primero. Si hay claves repetidas, se actualizan con los valores del segundo diccionario. Por ejemplo: d1 = {'a': 1}; d2 = {'b': 2}; d1.update(d2); # ahora d1 es {'a': 1, 'b': 2}.",
              "test": "d1={'a':1}; d2={'b':2}; actualizar_diccionario(d1,d2); d1['b']==2"
            },
            {
              "enunciado": "Crea una función llamada 'filtrar_diccionario' que reciba un diccionario y un número como parámetros, y devuelva un nuevo diccionario que contenga solo los pares clave-valor donde el valor sea mayor al número dado. Por ejemplo, filtrar_diccionario({'a':1, 'b':3, 'c':2}, 1) debe devolver {'b':3, 'c':2}. Para filtrar un diccionario, recorre todos los pares clave-valor y agrega solo los que cumplan la condición. Usa un bucle 'for' con .items(): for clave, valor in mi_dict.items(): if valor > numero: nuevo_dict[clave] = valor.",
              "test": "filtrar_diccionario({'a':1,'b':3,'c':2},1) == {'b':3,'c':2}"
            },
            {
              "enunciado": "Crea una función llamada 'fusionar_diccionarios' que reciba dos diccionarios como parámetros y devuelva un nuevo diccionario que contenga todos los pares clave-valor de ambos diccionarios. Si hay claves repetidas, debe usar el valor del segundo diccionario. Por ejemplo, fusionar_diccionarios({'a':1}, {'a':2, 'b':3}) debe devolver {'a':2, 'b':3}. Para fusionar diccionarios, puedes usar el método .update() o crear un nuevo diccionario y copiar todos los elementos. Primero copia el primer diccionario, luego actualiza con el segundo: nuevo_dict = dict(dict1); nuevo_dict.update(dict2).",
              "test": "fusionar_diccionarios({'a':1},{'a':2,'b':3}) == {'a':2,'b':3}"
            }
          ]
        },
        {
          "nombre": "Módulos",
          "teoria": "Los módulos permiten organizar código en archivos separados. Puedes importar funciones, clases y variables de otros módulos usando 'import' o 'from ... import'.",
          "ejercicios": [
            {
              "enunciado": "Crea un módulo llamado 'matematicas' con funciones 'suma', 'resta', 'multiplicacion' y 'division'. Luego importa y usa la función 'suma'.",
              "test": "import matematicas; matematicas.suma(5, 3) == 8"
            },
            {
              "enunciado": "Crea un módulo llamado 'utilidades' con una función 'formatear_nombre' que reciba nombre y apellido y retorne 'Apellido, Nombre'.",
              "test": "from utilidades import formatear_nombre; formatear_nombre('Juan', 'Pérez') == 'Pérez, Juan'"
            },
            {
              "enunciado": "Crea un módulo llamado 'validaciones' con funciones 'es_email_valido' y 'es_telefono_valido' que validen formatos básicos.",
              "test": "from validaciones import es_email_valido, es_telefono_valido; es_email_valido('test@test.com') == True and es_telefono_valido('123-456-7890') == True"
            },
            {
              "enunciado": "Crea un módulo llamado 'conversiones' con funciones para convertir entre diferentes unidades (metros a pies, kilogramos a libras, etc.).",
              "test": "from conversiones import metros_a_pies, kg_a_libras; abs(metros_a_pies(1) - 3.28084) < 0.01 and abs(kg_a_libras(1) - 2.20462) < 0.01"
            },
            {
              "enunciado": "Crea un módulo llamado 'fechas' con funciones 'es_fecha_valida', 'calcular_edad' y 'dias_entre_fechas'.",
              "test": "from fechas import es_fecha_valida, calcular_edad; es_fecha_valida('2023-12-25') == True and calcular_edad('1990-01-01') > 0"
            },
            {
              "enunciado": "Crea un módulo llamado 'archivos' con funciones 'leer_archivo', 'escribir_archivo' y 'copiar_archivo'.",
              "test": "from archivos import escribir_archivo, leer_archivo; escribir_archivo('test.txt', 'hola'); leer_archivo('test.txt') == 'hola'"
            },
            {
              "enunciado": "Crea un módulo llamado 'estadisticas' con funciones 'media', 'mediana', 'moda' y 'desviacion_estandar'.",
              "test": "from estadisticas import media, mediana; media([1,2,3,4,5]) == 3.0 and mediana([1,2,3,4,5]) == 3"
            },
            {
              "enunciado": "Crea un módulo llamado 'crypto' con funciones 'encriptar_texto', 'desencriptar_texto' usando un algoritmo simple de sustitución.",
              "test": "from crypto import encriptar_texto, desencriptar_texto; texto = 'hola'; encriptado = encriptar_texto(texto); desencriptar_texto(encriptado) == texto"
            },
            {
              "enunciado": "Crea un módulo llamado 'red' con funciones 'validar_ip', 'validar_url' y 'extraer_dominio'.",
              "test": "from red import validar_ip, extraer_dominio; validar_ip('192.168.1.1') == True and extraer_dominio('https://www.ejemplo.com/path') == 'ejemplo.com'"
            },
            {
              "enunciado": "Crea un módulo llamado 'configuracion' con una clase 'Config' que maneje configuraciones de aplicación con métodos 'cargar' y 'guardar'.",
              "test": "from configuracion import Config; config = Config(); config.cargar('test_config.json'); isinstance(config, Config)"
            }
          ]
        },
        {
          "nombre": "Paquetes",
          "teoria": "Los paquetes son directorios que contienen módulos y un archivo __init__.py. Permiten organizar módulos relacionados en una estructura jerárquica.",
          "ejercicios": [
            {
              "enunciado": "Crea un paquete llamado 'calculadora' con módulos 'basica' y 'avanzada'. El módulo 'basica' debe tener operaciones simples y 'avanzada' operaciones complejas.",
              "test": "from calculadora.basica import suma, resta; from calculadora.avanzada import potencia; suma(5,3) == 8 and potencia(2,3) == 8"
            },
            {
              "enunciado": "Crea un paquete llamado 'base_datos' con módulos 'conexion', 'consultas' y 'modelos'. El módulo 'conexion' debe simular una conexión a base de datos.",
              "test": "from base_datos.conexion import crear_conexion; from base_datos.consultas import ejecutar_consulta; conn = crear_conexion(); isinstance(conn, dict)"
            },
            {
              "enunciado": "Crea un paquete llamado 'web' con módulos 'servidor', 'cliente' y 'utilidades'. El módulo 'servidor' debe simular un servidor web básico.",
              "test": "from web.servidor import iniciar_servidor; from web.cliente import hacer_peticion; servidor = iniciar_servidor(8000); isinstance(servidor, dict)"
            },
            {
              "enunciado": "Crea un paquete llamado 'graficos' con módulos 'lineas', 'barras' y 'pastel'. Cada módulo debe tener funciones para crear diferentes tipos de gráficos.",
              "test": "from graficos.lineas import crear_linea; from graficos.barras import crear_barra; linea = crear_linea([1,2,3], [4,5,6]); isinstance(linea, dict)"
            },
            {
              "enunciado": "Crea un paquete llamado 'reportes' con módulos 'generador', 'formato' y 'exportador'. El módulo 'generador' debe crear reportes básicos.",
              "test": "from reportes.generador import crear_reporte; from reportes.formato import formatear_reporte; reporte = crear_reporte('datos'); isinstance(reporte, dict)"
            },
            {
              "enunciado": "Crea un paquete llamado 'autenticacion' con módulos 'login', 'registro' y 'sesion'. El módulo 'login' debe validar credenciales básicas.",
              "test": "from autenticacion.login import validar_usuario; from autenticacion.registro import crear_usuario; resultado = validar_usuario('admin', 'password'); isinstance(resultado, bool)"
            },
            {
              "enunciado": "Crea un paquete llamado 'api' con módulos 'endpoints', 'middleware' y 'respuestas'. El módulo 'endpoints' debe definir rutas básicas de API.",
              "test": "from api.endpoints import definir_ruta; from api.respuestas import crear_respuesta; ruta = definir_ruta('/usuarios', 'GET'); isinstance(ruta, dict)"
            },
            {
              "enunciado": "Crea un paquete llamado 'testing' con módulos 'unittest', 'integration' y 'mocks'. El módulo 'unittest' debe tener funciones para testing básico.",
              "test": "from testing.unittest import ejecutar_test; from testing.mocks import crear_mock; resultado = ejecutar_test(lambda: True); resultado == True"
            },
            {
              "enunciado": "Crea un paquete llamado 'logging' con módulos 'logger', 'handlers' y 'formatters'. El módulo 'logger' debe configurar logging básico.",
              "test": "from logging.logger import configurar_logger; from logging.handlers import crear_handler; logger = configurar_logger('test'); isinstance(logger, dict)"
            },
            {
              "enunciado": "Crea un paquete llamado 'cache' con módulos 'memoria', 'redis' y 'disco'. El módulo 'memoria' debe implementar cache en memoria.",
              "test": "from cache.memoria import CacheMemoria; from cache.redis import CacheRedis; cache_mem = CacheMemoria(); cache_mem.set('key', 'value'); cache_mem.get('key') == 'value'"
            }
          ]
        },
        {
          "nombre": "Manejo de Excepciones Avanzado",
          "teoria": "El manejo avanzado de excepciones incluye excepciones personalizadas, manejo de múltiples tipos de excepciones, y uso de 'finally' y 'else'.",
          "ejercicios": [
            {
              "enunciado": "Crea una excepción personalizada llamada 'ValorInvalidoError' que se lance cuando un valor no esté en el rango esperado.",
              "test": "class ValorInvalidoError(Exception): pass; try: raise ValorInvalidoError('Valor fuera de rango'); except ValorInvalidoError: pass"
            },
            {
              "enunciado": "Crea una función llamada 'procesar_datos_seguro' que maneje múltiples tipos de excepciones (ValueError, TypeError, IndexError) con mensajes específicos.",
              "test": "procesar_datos_seguro([1,2,3], 1) == 2 and procesar_datos_seguro([1,2,3], 'a') == 'Error: Índice debe ser un número'"
            },
            {
              "enunciado": "Crea una función llamada 'conectar_base_datos' que use 'try/except/finally' para asegurar que la conexión se cierre correctamente.",
              "test": "conexion = conectar_base_datos('test.db'); isinstance(conexion, dict) and 'cerrada' in conexion"
            },
            {
              "enunciado": "Crea una función llamada 'validar_formulario' que lance excepciones personalizadas para diferentes tipos de errores de validación.",
              "test": "try: validar_formulario({'nombre': '', 'edad': -5}); except Exception as e: isinstance(str(e), str)"
            },
            {
              "enunciado": "Crea una función llamada 'ejecutar_comando' que use 'try/except/else' para ejecutar un comando y manejar diferentes tipos de errores.",
              "test": "resultado = ejecutar_comando('ls'); isinstance(resultado, (str, dict))"
            },
            {
              "enunciado": "Crea una función llamada 'procesar_archivo' que maneje excepciones específicas para archivos (FileNotFoundError, PermissionError, IOError).",
              "test": "procesar_archivo('archivo_inexistente.txt') == 'Error: Archivo no encontrado'"
            },
            {
              "enunciado": "Crea una función llamada 'validar_red' que maneje excepciones de red (ConnectionError, TimeoutError) y reintente la conexión.",
              "test": "resultado = validar_red('http://ejemplo.com'); isinstance(resultado, (str, dict))"
            },
            {
              "enunciado": "Crea una función llamada 'procesar_json' que maneje excepciones específicas de JSON (JSONDecodeError, KeyError) y proporcione valores por defecto.",
              "test": "procesar_json('{\"nombre\": \"Juan\", \"edad\": 25}') == {'nombre': 'Juan', 'edad': 25} and procesar_json('json_invalido') == {}"
            },
            {
              "enunciado": "Crea una función llamada 'ejecutar_transaccion' que use 'try/except/finally' para simular una transacción bancaria con rollback en caso de error.",
              "test": "resultado = ejecutar_transaccion(100, 'deposito'); isinstance(resultado, dict) and 'estado' in resultado"
            },
            {
              "enunciado": "Crea una función llamada 'validar_api' que maneje excepciones de API (HTTPError, URLError) y proporcione respuestas de error estructuradas.",
              "test": "respuesta = validar_api('https://api.ejemplo.com/datos'); isinstance(respuesta, dict) and 'status' in respuesta"
            }
          ]
        }
      ]
    },
    {
      "nombre": "Módulo 3 - Funciones de Python",
      "descripcion": "Funciones, recursión, documentación, funciones Lambdas, funciones de orden superior, closure functions, decoradores, módulos, paquetes y manejo de excepciones",
      "temas": [
        {
          "nombre": "Funciones Básicas",
          "teoria": "Las funciones agrupan código reutilizable. Pueden recibir parámetros y devolver valores. Usa 'def' para definirlas.",
          "ejercicios": [
            {
              "enunciado": "Crea una función llamada 'saludar' que reciba un parámetro llamado 'nombre' y devuelva el texto 'Hola, ' seguido del nombre. Usa la palabra clave 'def' para definir la función y 'return' para devolver el resultado. Por ejemplo, saludar('Juan') debe devolver 'Hola, Juan'.",
              "test": "saludar('Juan') == 'Hola, Juan'"
            },
            {
              "enunciado": "Crea una función llamada 'suma' que reciba dos parámetros (puedes llamarlos 'a' y 'b') y devuelva la suma de ambos números. Usa el operador + para sumar los parámetros. Por ejemplo, suma(5, 3) debe devolver 8.",
              "test": "suma(5, 3) == 8 and suma(10, 20) == 30"
            },
            {
              "enunciado": "Crea una función llamada 'es_mayor_edad' que reciba un parámetro llamado 'edad' y devuelva True si la edad es mayor o igual a 18, o False si es menor a 18. Usa el operador >= para comparar. Por ejemplo, es_mayor_edad(20) debe devolver True.",
              "test": "es_mayor_edad(20) == True and es_mayor_edad(16) == False"
            },
            {
              "enunciado": "Crea una función llamada 'calcular_area_rectangulo' que reciba dos parámetros: 'base' y 'altura', y devuelva el área del rectángulo (base * altura). El área de un rectángulo se calcula multiplicando la base por la altura. Por ejemplo, calcular_area_rectangulo(5, 3) debe devolver 15.",
              "test": "calcular_area_rectangulo(5, 3) == 15 and calcular_area_rectangulo(10, 2) == 20"
            },
            {
              "enunciado": "Crea una función llamada 'es_par' que reciba un número como parámetro y devuelva True si el número es par, o False si es impar. Un número es par si al dividirlo por 2 no queda resto (usa el operador % para obtener el resto). Por ejemplo, es_par(4) debe devolver True.",
              "test": "es_par(4) == True and es_par(7) == False and es_par(0) == True"
            },
            {
              "enunciado": "Crea una función llamada 'obtener_maximo' que reciba tres números como parámetros y devuelva el mayor de los tres. Puedes usar la función max() de Python o comparar los números uno por uno usando if/elif/else. Por ejemplo, obtener_maximo(1, 5, 3) debe devolver 5.",
              "test": "obtener_maximo(1, 5, 3) == 5 and obtener_maximo(10, 10, 5) == 10"
            },
            {
              "enunciado": "Crea una función llamada 'calcular_promedio' que reciba una lista de números como parámetro y devuelva el promedio (suma de todos los números dividido por la cantidad de números). Usa la función sum() para sumar la lista y len() para obtener la cantidad de elementos. Por ejemplo, calcular_promedio([1, 2, 3, 4, 5]) debe devolver 3.0.",
              "test": "calcular_promedio([1, 2, 3, 4, 5]) == 3.0 and calcular_promedio([10, 20]) == 15.0"
            },
            {
              "enunciado": "Crea una función llamada 'contar_vocales' que reciba un texto (string) como parámetro y devuelva cuántas vocales contiene (a, e, i, o, u, tanto en mayúsculas como en minúsculas). Puedes usar un bucle for para recorrer cada letra y verificar si es vocal usando 'in'. Por ejemplo, contar_vocales('hola') debe devolver 2.",
              "test": "contar_vocales('hola') == 2 and contar_vocales('python') == 1 and contar_vocales('aeiou') == 5"
            },
            {
              "enunciado": "Crea una función llamada 'es_primo' que reciba un número como parámetro y devuelva True si el número es primo, o False si no lo es. Un número primo es aquel que solo es divisible por 1 y por sí mismo. Los números menores a 2 no son primos. Usa un bucle para verificar si el número es divisible por algún número entre 2 y la raíz cuadrada del número.",
              "test": "es_primo(2) == True and es_primo(7) == True and es_primo(4) == False and es_primo(1) == False"
            },
            {
              "enunciado": "Crea una función llamada 'generar_fibonacci' que reciba un número n como parámetro y devuelva una lista con los primeros n números de la secuencia de Fibonacci. La secuencia empieza con 0, 1 y cada número siguiente es la suma de los dos anteriores. Por ejemplo, generar_fibonacci(5) debe devolver [0, 1, 1, 2, 3].",
              "test": "generar_fibonacci(5) == [0, 1, 1, 2, 3] and generar_fibonacci(8) == [0, 1, 1, 2, 3, 5, 8, 13]"
            }
          ]
        },
        {
          "nombre": "Recursión",
          "teoria": "La recursión es cuando una función se llama a sí misma. Es útil para problemas que se pueden dividir en subproblemas más pequeños.",
          "ejercicios": [
            {
              "enunciado": "Crea una función recursiva llamada 'factorial' que calcule el factorial de un número n. El factorial de n (n!) es n multiplicado por el factorial de (n-1). El factorial de 0 es 1 (caso base). Por ejemplo: 5! = 5 * 4! = 5 * 4 * 3! = 5 * 4 * 3 * 2! = 5 * 4 * 3 * 2 * 1! = 5 * 4 * 3 * 2 * 1 = 120. Usa recursión: si n es 0, devuelve 1; si no, devuelve n * factorial(n-1).",
              "test": "factorial(5) == 120 and factorial(0) == 1"
            },
            {
              "enunciado": "Crea una función recursiva llamada 'fibonacci' que calcule el n-ésimo número de la secuencia de Fibonacci. La secuencia empieza con 0, 1 y cada número siguiente es la suma de los dos anteriores: 0, 1, 1, 2, 3, 5, 8, 13... Los casos base son: fibonacci(0) = 0 y fibonacci(1) = 1. Para n > 1, devuelve fibonacci(n-1) + fibonacci(n-2). Por ejemplo, fibonacci(6) debe devolver 8.",
              "test": "fibonacci(6) == 8 and fibonacci(0) == 0 and fibonacci(1) == 1"
            },
            {
              "enunciado": "Crea una función recursiva llamada 'suma_digitos' que reciba un número y devuelva la suma de todos sus dígitos. El caso base es cuando el número es menor a 10 (devuelve el número mismo). Para números mayores, toma el último dígito (usando % 10) y súmalo a la suma de los dígitos restantes (usando // 10). Por ejemplo, suma_digitos(123) = 3 + suma_digitos(12) = 3 + 2 + suma_digitos(1) = 3 + 2 + 1 = 6.",
              "test": "suma_digitos(123) == 6 and suma_digitos(999) == 27 and suma_digitos(0) == 0"
            },
            {
              "enunciado": "Crea una función recursiva llamada 'invertir_numero' que reciba un número y devuelva el número con sus dígitos invertidos. El caso base es cuando el número es menor a 10 (devuelve el número mismo). Para números mayores, toma el último dígito, multiplica por 10 elevado a la cantidad de dígitos restantes, y súmalo al número invertido de los dígitos restantes. Por ejemplo, invertir_numero(123) debe devolver 321.",
              "test": "invertir_numero(123) == 321 and invertir_numero(1000) == 1 and invertir_numero(0) == 0"
            },
            {
              "enunciado": "Crea una función recursiva llamada 'mcd' que calcule el máximo común divisor de dos números usando el algoritmo de Euclides. El MCD de a y b es igual al MCD de b y el resto de dividir a entre b. El caso base es cuando b es 0, entonces el MCD es a. Por ejemplo, mcd(48, 18) = mcd(18, 12) = mcd(12, 6) = mcd(6, 0) = 6.",
              "test": "mcd(48, 18) == 6 and mcd(12, 8) == 4 and mcd(7, 13) == 1"
            },
            {
              "enunciado": "Crea una función recursiva llamada 'potencia' que calcule x elevado a n (x^n). El caso base es cuando n es 0 (devuelve 1). Para n positivo, devuelve x * potencia(x, n-1). Para n negativo, devuelve 1 / potencia(x, -n). Por ejemplo, potencia(2, 3) debe devolver 8 (2 * 2 * 2).",
              "test": "potencia(2, 3) == 8 and potencia(5, 0) == 1 and potencia(3, 4) == 81"
            },
            {
              "enunciado": "Crea una función recursiva llamada 'contar_ocurrencias' que reciba una lista y un elemento, y devuelva cuántas veces aparece ese elemento en la lista. El caso base es cuando la lista está vacía (devuelve 0). Para una lista no vacía, verifica si el primer elemento es igual al buscado: si es igual, suma 1 al resultado de contar en el resto de la lista; si no, solo cuenta en el resto de la lista.",
              "test": "contar_ocurrencias([1,2,2,3,2], 2) == 3 and contar_ocurrencias([1,2,3], 5) == 0"
            },
            {
              "enunciado": "Crea una función recursiva llamada 'es_palindromo' que reciba un string y devuelva True si es palíndromo (se lee igual al derecho y al revés), o False si no lo es. Los casos base son: string vacío (True) y string de un carácter (True). Para strings más largos, compara el primer y último carácter: si son iguales, verifica recursivamente el string sin esos caracteres; si no son iguales, devuelve False.",
              "test": "es_palindromo('ana') == True and es_palindromo('python') == False and es_palindromo('') == True"
            },
            {
              "enunciado": "Crea una función recursiva llamada 'generar_combinaciones' que reciba una lista y un número k, y devuelva todas las combinaciones de k elementos de la lista. El caso base es cuando k es 0 (devuelve [[]]) o cuando k es mayor que la longitud de la lista (devuelve []). Para otros casos, toma el primer elemento y genera combinaciones de k-1 elementos con el resto de la lista, luego agrega el primer elemento a cada combinación.",
              "test": "len(generar_combinaciones([1,2,3], 2)) == 3 and len(generar_combinaciones([1,2,3,4], 3)) == 4"
            },
            {
              "enunciado": "Crea una función recursiva llamada 'torres_hanoi' que resuelva el problema de las Torres de Hanoi para n discos. El problema consiste en mover n discos de una torre a otra usando una torre auxiliar, sin colocar un disco grande sobre uno pequeño. Para n discos: mueve n-1 discos a la torre auxiliar, mueve el disco más grande a la torre destino, y mueve los n-1 discos de la torre auxiliar a la torre destino. El caso base es n=1 (mover directamente).",
              "test": "movimientos = torres_hanoi(3); len(movimientos) == 7 and isinstance(movimientos, list)"
            }
          ]
        },
        {
          "nombre": "Funciones Lambda",
          "teoria": "Las funciones lambda son funciones anónimas de una sola línea. Se usan para operaciones simples y como argumentos de otras funciones.",
          "ejercicios": [
            {
              "enunciado": "Crea una función lambda llamada 'cuadrado' que reciba un número y devuelva su cuadrado. Las funciones lambda se escriben así: lambda parametros: expresion. Por ejemplo: cuadrado = lambda x: x**2. Luego puedes usarla como cuadrado(5) para obtener 25.",
              "test": "cuadrado(5) == 25"
            },
            {
              "enunciado": "Crea una función lambda llamada 'es_par' que reciba un número y devuelva True si es par, o False si es impar. Usa el operador % para verificar si el número es par (si el resto de dividir por 2 es 0). Por ejemplo: es_par = lambda x: x % 2 == 0.",
              "test": "es_par(4) == True and es_par(7) == False"
            },
            {
              "enunciado": "Crea una función lambda llamada 'multiplicar' que reciba dos números y devuelva su producto. Las funciones lambda pueden recibir múltiples parámetros separados por comas. Por ejemplo: multiplicar = lambda a, b: a * b.",
              "test": "multiplicar(3, 4) == 12"
            },
            {
              "enunciado": "Crea una función lambda llamada 'dividir' que reciba dos números y devuelva su división. Usa el operador / para la división. Ten en cuenta que la división en Python devuelve un número decimal (float). Por ejemplo: dividir = lambda a, b: a / b.",
              "test": "dividir(10, 2) == 5.0 and dividir(7, 2) == 3.5"
            },
            {
              "enunciado": "Crea una función lambda llamada 'es_mayor_que' que reciba dos números y devuelva True si el primero es mayor que el segundo, o False en caso contrario. Usa el operador > para comparar. Por ejemplo: es_mayor_que = lambda a, b: a > b.",
              "test": "es_mayor_que(5, 3) == True and es_mayor_que(2, 8) == False"
            },
            {
              "enunciado": "Crea una función lambda llamada 'longitud_string' que reciba un string y devuelva su longitud. Usa la función len() para obtener la longitud de un string. Por ejemplo: longitud_string = lambda texto: len(texto).",
              "test": "longitud_string('hola') == 4 and longitud_string('python') == 6"
            },
            {
              "enunciado": "Crea una función lambda llamada 'es_vocal' que reciba un carácter y devuelva True si es vocal (a, e, i, o, u), o False en caso contrario. Usa el operador 'in' para verificar si el carácter está en la cadena de vocales. Considera tanto mayúsculas como minúsculas usando .lower().",
              "test": "es_vocal('a') == True and es_vocal('b') == False and es_vocal('E') == True"
            },
            {
              "enunciado": "Crea una función lambda llamada 'concatenar' que reciba dos strings y devuelva su concatenación (unión). Usa el operador + para concatenar strings. Por ejemplo: concatenar = lambda str1, str2: str1 + str2.",
              "test": "concatenar('hola', 'mundo') == 'holamundo' and concatenar('python', '3') == 'python3'"
            },
            {
              "enunciado": "Crea una función lambda llamada 'es_positivo' que reciba un número y devuelva True si es positivo (mayor que 0), o False si es negativo o cero. Usa el operador > para verificar si el número es mayor que 0. Por ejemplo: es_positivo = lambda x: x > 0.",
              "test": "es_positivo(5) == True and es_positivo(-3) == False and es_positivo(0) == False"
            },
            {
              "enunciado": "Crea una función lambda llamada 'calcular_area_circulo' que reciba el radio y devuelva el área del círculo. El área de un círculo se calcula con la fórmula π * r². Usa 3.14159 como aproximación de π y el operador ** para elevar al cuadrado. Por ejemplo: calcular_area_circulo = lambda radio: 3.14159 * radio**2.",
              "test": "abs(calcular_area_circulo(1) - 3.14159) < 0.01 and abs(calcular_area_circulo(2) - 12.56636) < 0.01"
            }
          ]
        },
        {
          "nombre": "Manejo de Excepciones",
          "teoria": "El manejo de excepciones permite controlar errores en tiempo de ejecución. Usa try/except para capturar y manejar errores.",
          "ejercicios": [
            {
              "enunciado": "Crea una función llamada 'dividir_seguro' que reciba dos números y devuelva su división. Si hay división por cero (cuando el segundo número es 0), debe devolver el texto 'Error: División por cero'. Usa try/except para capturar la excepción ZeroDivisionError. Por ejemplo: try: resultado = a / b; except ZeroDivisionError: resultado = 'Error: División por cero'.",
              "test": "dividir_seguro(10, 2) == 5.0 and dividir_seguro(10, 0) == 'Error: División por cero'"
            },
            {
              "enunciado": "Crea una función llamada 'convertir_a_entero' que reciba un texto y devuelva el número entero correspondiente. Si el texto no se puede convertir a entero (por ejemplo, si contiene letras), debe devolver 'Error: No es un número válido'. Usa try/except para capturar la excepción ValueError. Por ejemplo: try: numero = int(texto); except ValueError: numero = 'Error: No es un número válido'.",
              "test": "convertir_a_entero('123') == 123 and convertir_a_entero('abc') == 'Error: No es un número válido'"
            },
            {
              "enunciado": "Crea una función llamada 'acceder_lista' que reciba una lista y un índice, y devuelva el elemento en esa posición. Si el índice no existe (es muy grande o negativo), debe devolver 'Error: Índice fuera de rango'. Usa try/except para capturar la excepción IndexError. Por ejemplo: try: elemento = lista[indice]; except IndexError: elemento = 'Error: Índice fuera de rango'.",
              "test": "acceder_lista([1,2,3], 1) == 2 and acceder_lista([1,2,3], 5) == 'Error: Índice fuera de rango'"
            },
            {
              "enunciado": "Crea una función llamada 'convertir_a_float' que reciba un texto y devuelva el número decimal correspondiente. Si el texto no se puede convertir a decimal (por ejemplo, si contiene letras), debe devolver 'Error: No es un número decimal válido'. Usa try/except para capturar la excepción ValueError. Por ejemplo: try: numero = float(texto); except ValueError: numero = 'Error: No es un número decimal válido'.",
              "test": "convertir_a_float('3.14') == 3.14 and convertir_a_float('abc') == 'Error: No es un número decimal válido'"
            },
            {
              "enunciado": "Crea una función llamada 'abrir_archivo' que reciba un nombre de archivo y devuelva su contenido. Si el archivo no existe, debe devolver 'Error: Archivo no encontrado'. Usa try/except para capturar la excepción FileNotFoundError. Por ejemplo: try: with open(nombre_archivo, 'r') as f: contenido = f.read(); except FileNotFoundError: contenido = 'Error: Archivo no encontrado'.",
              "test": "abrir_archivo('archivo_inexistente.txt') == 'Error: Archivo no encontrado'"
            },
            {
              "enunciado": "Crea una función llamada 'calcular_raiz' que reciba un número y devuelva su raíz cuadrada. Si el número es negativo, debe devolver 'Error: No se puede calcular raíz de número negativo'. Usa la función math.sqrt() o el operador ** 0.5, y maneja el caso de números negativos con una condición if antes de calcular la raíz.",
              "test": "calcular_raiz(4) == 2.0 and calcular_raiz(-1) == 'Error: No se puede calcular raíz de número negativo'"
            },
            {
              "enunciado": "Crea una función llamada 'acceder_diccionario' que reciba un diccionario y una clave, y devuelva el valor correspondiente. Si la clave no existe en el diccionario, debe devolver 'Error: Clave no encontrada'. Usa try/except para capturar la excepción KeyError, o usa el método .get() del diccionario con un valor por defecto.",
              "test": "acceder_diccionario({'a':1,'b':2}, 'a') == 1 and acceder_diccionario({'a':1}, 'c') == 'Error: Clave no encontrada'"
            },
            {
              "enunciado": "Crea una función llamada 'convertir_lista' que reciba un texto que representa una lista (por ejemplo '[1,2,3]') y devuelva la lista correspondiente. Si el texto no representa una lista válida, debe devolver 'Error: Formato de lista inválido'. Usa try/except para capturar la excepción que se produce al evaluar el texto con eval(). Ten cuidado: eval() puede ser peligroso en aplicaciones reales.",
              "test": "convertir_lista('[1,2,3]') == [1,2,3] and convertir_lista('texto') == 'Error: Formato de lista inválido'"
            },
            {
              "enunciado": "Crea una función llamada 'validar_edad' que reciba una edad y devuelva True si es válida (entre 0 y 120), o False en caso contrario. Si la entrada no es un número, debe devolver False. Usa try/except para manejar el caso donde la entrada no se puede convertir a número, y luego verifica si está en el rango válido.",
              "test": "validar_edad(25) == True and validar_edad(150) == False and validar_edad('abc') == False"
            },
            {
              "enunciado": "Crea una función llamada 'procesar_datos' que reciba una lista de datos y devuelva la suma de todos los números en la lista. Si algún elemento no es un número, debe ignorarlo y continuar procesando los demás elementos. Usa try/except dentro de un bucle para manejar cada elemento individualmente.",
              "test": "procesar_datos([1,2,'a',3,4]) == 10 and procesar_datos(['a','b','c']) == 0"
            }
          ]
        },
        {
          "nombre": "Documentación",
          "teoria": "La documentación de funciones es esencial para el mantenimiento del código. Usa docstrings (triple comillas) para documentar el propósito, parámetros y valores de retorno.",
          "ejercicios": [
            {
              "enunciado": "Crea una función llamada 'calcular_area_triangulo' con documentación completa que explique qué hace, qué parámetros recibe y qué retorna.",
              "test": "calcular_area_triangulo(5, 3) == 7.5 and 'base' in calcular_area_triangulo.__doc__"
            },
            {
              "enunciado": "Crea una función llamada 'es_anagrama' con documentación que explique si dos palabras son anagramas (mismas letras en diferente orden).",
              "test": "es_anagrama('roma', 'amor') == True and es_anagrama('python', 'java') == False and 'anagrama' in es_anagrama.__doc__"
            },
            {
              "enunciado": "Crea una función llamada 'generar_password' con documentación que genere una contraseña aleatoria de longitud especificada.",
              "test": "len(generar_password(8)) == 8 and len(generar_password(12)) == 12 and 'password' in generar_password.__doc__"
            },
            {
              "enunciado": "Crea una función llamada 'validar_email' con documentación que verifique si un email tiene formato válido.",
              "test": "validar_email('usuario@dominio.com') == True and validar_email('email_invalido') == False and 'email' in validar_email.__doc__"
            },
            {
              "enunciado": "Crea una función llamada 'calcular_hipotenusa' con documentación que calcule la hipotenusa de un triángulo rectángulo usando el teorema de Pitágoras.",
              "test": "calcular_hipotenusa(3, 4) == 5.0 and 'hipotenusa' in calcular_hipotenusa.__doc__"
            },
            {
              "enunciado": "Crea una función llamada 'convertir_temperatura' con documentación que convierta entre Celsius y Fahrenheit.",
              "test": "convertir_temperatura(0, 'C_to_F') == 32.0 and convertir_temperatura(212, 'F_to_C') == 100.0 and 'temperatura' in convertir_temperatura.__doc__"
            },
            {
              "enunciado": "Crea una función llamada 'encontrar_primos' con documentación que encuentre todos los números primos hasta un límite dado.",
              "test": "encontrar_primos(10) == [2,3,5,7] and 'primos' in encontrar_primos.__doc__"
            },
            {
              "enunciado": "Crea una función llamada 'calcular_factorial_iterativo' con documentación que calcule el factorial de forma iterativa.",
              "test": "calcular_factorial_iterativo(5) == 120 and 'factorial' in calcular_factorial_iterativo.__doc__"
            },
            {
              "enunciado": "Crea una función llamada 'ordenar_lista' con documentación que ordene una lista usando el algoritmo de burbuja.",
              "test": "ordenar_lista([3,1,4,1,5]) == [1,1,3,4,5] and 'ordenar' in ordenar_lista.__doc__"
            },
            {
              "enunciado": "Crea una función llamada 'buscar_binaria' con documentación que implemente búsqueda binaria en una lista ordenada.",
              "test": "buscar_binaria([1,2,3,4,5], 3) == 2 and buscar_binaria([1,2,3,4,5], 6) == -1 and 'binaria' in buscar_binaria.__doc__"
            }
          ]
        },
        {
          "nombre": "Funciones de Orden Superior",
          "teoria": "Las funciones de orden superior son funciones que reciben otras funciones como parámetros o retornan funciones. Son fundamentales en programación funcional.",
          "ejercicios": [
            {
              "enunciado": "Crea una función llamada 'aplicar_funcion' que reciba una función y una lista, y retorne una nueva lista con la función aplicada a cada elemento.",
              "test": "aplicar_funcion(lambda x: x*2, [1,2,3]) == [2,4,6] and aplicar_funcion(lambda x: x**2, [1,2,3]) == [1,4,9]"
            },
            {
              "enunciado": "Crea una función llamada 'filtrar_lista' que reciba una función de condición y una lista, y retorne solo los elementos que cumplan la condición.",
              "test": "filtrar_lista(lambda x: x > 0, [-1,0,1,2,-3]) == [1,2] and filtrar_lista(lambda x: len(x) > 3, ['a','ab','abc','abcd']) == ['abcd']"
            },
            {
              "enunciado": "Crea una función llamada 'reducir_lista' que reciba una función, una lista y un valor inicial, y retorne el resultado de aplicar la función acumulativamente.",
              "test": "reducir_lista(lambda x,y: x+y, [1,2,3,4], 0) == 10 and reducir_lista(lambda x,y: x*y, [1,2,3,4], 1) == 24"
            },
            {
              "enunciado": "Crea una función llamada 'componer_funciones' que reciba dos funciones f y g, y retorne una nueva función que aplique f(g(x)).",
              "test": "f = lambda x: x*2; g = lambda x: x+1; h = componer_funciones(f,g); h(3) == 8"
            },
            {
              "enunciado": "Crea una función llamada 'mapear_diccionario' que reciba una función y un diccionario, y retorne un nuevo diccionario con la función aplicada a cada valor.",
              "test": "mapear_diccionario(lambda x: x*2, {'a':1,'b':2,'c':3}) == {'a':2,'b':4,'c':6}"
            },
            {
              "enunciado": "Crea una función llamada 'filtrar_diccionario' que reciba una función de condición y un diccionario, y retorne solo los pares clave-valor que cumplan la condición.",
              "test": "filtrar_diccionario(lambda x: x > 2, {'a':1,'b':3,'c':2,'d':4}) == {'b':3,'d':4}"
            },
            {
              "enunciado": "Crea una función llamada 'aplicar_funcion_condicional' que reciba una función, una condición y una lista, y aplique la función solo a los elementos que cumplan la condición.",
              "test": "aplicar_funcion_condicional(lambda x: x*2, lambda x: x > 0, [-1,0,1,2,-3]) == [-1,0,2,4,-3]"
            },
            {
              "enunciado": "Crea una función llamada 'crear_transformador' que reciba una lista de funciones y retorne una función que las aplique en secuencia.",
              "test": "f1 = lambda x: x+1; f2 = lambda x: x*2; f3 = lambda x: x**2; t = crear_transformador([f1,f2,f3]); t(2) == 36"
            },
            {
              "enunciado": "Crea una función llamada 'aplicar_funcion_n_veces' que reciba una función, un valor inicial y un número n, y aplique la función n veces al valor inicial.",
              "test": "aplicar_funcion_n_veces(lambda x: x*2, 1, 3) == 8 and aplicar_funcion_n_veces(lambda x: x+1, 0, 5) == 5"
            },
            {
              "enunciado": "Crea una función llamada 'crear_validador' que reciba una lista de funciones de validación y retorne una función que valide si un valor cumple todas las condiciones.",
              "test": "v1 = lambda x: x > 0; v2 = lambda x: x < 100; v3 = lambda x: isinstance(x, int); validador = crear_validador([v1,v2,v3]); validador(50) == True and validador(-1) == False"
            }
          ]
        },
        {
          "nombre": "Closure Functions",
          "teoria": "Las closure functions son funciones que capturan variables de su entorno (scope) y las mantienen en memoria. Son útiles para crear funciones con estado.",
          "ejercicios": [
            {
              "enunciado": "Crea una función llamada 'crear_contador' que retorne una función que mantenga un contador interno y lo incremente cada vez que se llame.",
              "test": "contador = crear_contador(); contador() == 1; contador() == 2; contador() == 3"
            },
            {
              "enunciado": "Crea una función llamada 'crear_acumulador' que retorne una función que mantenga una suma acumulada de todos los valores que reciba.",
              "test": "acumulador = crear_acumulador(); acumulador(5) == 5; acumulador(3) == 8; acumulador(10) == 18"
            },
            {
              "enunciado": "Crea una función llamada 'crear_multiplicador' que reciba un factor y retorne una función que multiplique cualquier número por ese factor.",
              "test": "duplicar = crear_multiplicador(2); triplicar = crear_multiplicador(3); duplicar(5) == 10 and triplicar(4) == 12"
            },
            {
              "enunciado": "Crea una función llamada 'crear_potenciador' que reciba un exponente y retorne una función que eleve cualquier número a ese exponente.",
              "test": "cuadrado = crear_potenciador(2); cubo = crear_potenciador(3); cuadrado(4) == 16 and cubo(3) == 27"
            },
            {
              "enunciado": "Crea una función llamada 'crear_filtro' que reciba una condición y retorne una función que mantenga una lista de elementos que cumplan esa condición.",
              "test": "filtro_pares = crear_filtro(lambda x: x % 2 == 0); filtro_pares(1); filtro_pares(2); filtro_pares(3); filtro_pares(4); len(filtro_pares()) == 2"
            },
            {
              "enunciado": "Crea una función llamada 'crear_calculadora' que retorne un diccionario con funciones para sumar, restar, multiplicar y dividir, manteniendo un valor acumulado.",
              "test": "calc = crear_calculadora(); calc['sumar'](5); calc['multiplicar'](3); calc['obtener_valor']() == 15"
            },
            {
              "enunciado": "Crea una función llamada 'crear_historial' que retorne una función que mantenga un historial de las últimas n operaciones realizadas.",
              "test": "historial = crear_historial(3); historial('suma', 5); historial('resta', 2); historial('multiplicacion', 3); len(historial()) == 3"
            },
            {
              "enunciado": "Crea una función llamada 'crear_validador_personalizado' que reciba reglas de validación y retorne una función que valide datos según esas reglas.",
              "test": "validador = crear_validador_personalizado(['mayor_que_0', 'menor_que_100']); validador(50) == True and validador(150) == False"
            },
            {
              "enunciado": "Crea una función llamada 'crear_transformador_secuencial' que retorne una función que aplique transformaciones en secuencia y mantenga el resultado.",
              "test": "transformador = crear_transformador_secuencial(); transformador(lambda x: x*2); transformador(lambda x: x+1); transformador(5) == 11"
            },
            {
              "enunciado": "Crea una función llamada 'crear_cache' que retorne una función que cachee resultados de operaciones costosas para evitar recálculos.",
              "test": "cache = crear_cache(); cache(lambda x: x**2, 5) == 25; cache(lambda x: x**2, 5) == 25; len(cache()) == 1"
            }
          ]
        },
        {
          "nombre": "Decoradores",
          "teoria": "Los decoradores son funciones que modifican el comportamiento de otras funciones. Se usan con la sintaxis @decorador y son útiles para logging, validación, caching, etc.",
          "ejercicios": [
            {
              "enunciado": "Crea un decorador llamado 'medir_tiempo' que mida el tiempo de ejecución de una función y lo imprima.",
              "test": "import time; @medir_tiempo; def funcion_lenta(): time.sleep(0.1); resultado = funcion_lenta(); isinstance(resultado, (int, float, str))"
            },
            {
              "enunciado": "Crea un decorador llamado 'validar_argumentos' que valide que los argumentos de una función sean números positivos.",
              "test": "@validar_argumentos; def suma_positiva(a, b): return a + b; suma_positiva(5, 3) == 8 and suma_positiva(-1, 2) == 'Error: Argumentos deben ser positivos'"
            },
            {
              "enunciado": "Crea un decorador llamado 'cache_resultado' que cachee el resultado de una función para evitar recálculos con los mismos argumentos.",
              "test": "@cache_resultado; def factorial(n): return 1 if n <= 1 else n * factorial(n-1); factorial(5) == 120; factorial(5) == 120"
            },
            {
              "enunciado": "Crea un decorador llamado 'reintentar' que reintente la ejecución de una función hasta 3 veces si falla.",
              "test": "contador = 0; @reintentar; def funcion_inestable(): global contador; contador += 1; if contador < 3: raise Exception(); return 'exito'; funcion_inestable() == 'exito'"
            },
            {
              "enunciado": "Crea un decorador llamado 'log_funcion' que registre el nombre de la función, sus argumentos y el resultado de la ejecución.",
              "test": "@log_funcion; def multiplicar(a, b): return a * b; resultado = multiplicar(4, 5); resultado == 20"
            },
            {
              "enunciado": "Crea un decorador llamado 'validar_tipo' que valide que los argumentos de una función sean del tipo especificado.",
              "test": "@validar_tipo(int, int); def suma_enteros(a, b): return a + b; suma_enteros(5, 3) == 8 and suma_enteros('5', 3) == 'Error: Tipo incorrecto'"
            },
            {
              "enunciado": "Crea un decorador llamado 'limitar_llamadas' que limite el número de veces que se puede llamar una función.",
              "test": "@limitar_llamadas(2); def funcion_limitada(): return 'llamada'; funcion_limitada() == 'llamada'; funcion_limitada() == 'llamada'; funcion_limitada() == 'Error: Límite de llamadas alcanzado'"
            },
            {
              "enunciado": "Crea un decorador llamado 'convertir_resultado' que convierta el resultado de una función a un tipo específico.",
              "test": "@convertir_resultado(str); def numero_a_texto(n): return n; numero_a_texto(42) == '42' and isinstance(numero_a_texto(42), str)"
            },
            {
              "enunciado": "Crea un decorador llamado 'validar_rango' que valide que el resultado de una función esté dentro de un rango especificado.",
              "test": "@validar_rango(0, 100); def porcentaje(valor): return valor; porcentaje(50) == 50 and porcentaje(150) == 'Error: Resultado fuera de rango'"
            },
            {
              "enunciado": "Crea un decorador llamado 'ejecutar_condicional' que ejecute una función solo si se cumple una condición específica.",
              "test": "condicion = True; @ejecutar_condicional(lambda: condicion); def funcion_condicional(): return 'ejecutada'; funcion_condicional() == 'ejecutada'"
            }
          ]
        }
      ]
    },
    {
      "nombre": "Módulo 4 - Programación Orientada a Objetos (POO)",
      "descripcion": "Elementos básicos de POO, principios (herencia, polimorfismo, encapsulamiento), Magic Methods y práctica final con un juego de consola",
      "temas": [
        {
          "nombre": "Clases y Objetos",
          "teoria": "La Programación Orientada a Objetos (POO) organiza el código en clases que representan objetos del mundo real. Las clases tienen atributos y métodos.",
          "ejercicios": [
            {
              "enunciado": "Crea una clase llamada 'Persona' con atributos 'nombre' y 'edad', y un método 'saludar' que retorne 'Hola, soy [nombre]'.",
              "test": "p = Persona('Juan', 25); p.nombre == 'Juan' and p.edad == 25 and p.saludar() == 'Hola, soy Juan'"
            },
            {
              "enunciado": "Crea una clase llamada 'Rectangulo' con atributos 'ancho' y 'alto', y un método 'area' que retorne el área del rectángulo.",
              "test": "r = Rectangulo(5, 3); r.ancho == 5 and r.alto == 3 and r.area() == 15"
            },
            {
              "enunciado": "Crea una clase llamada 'Estudiante' con atributos 'nombre', 'notas' (lista) y métodos 'agregar_nota' y 'promedio'.",
              "test": "e = Estudiante('Ana'); e.agregar_nota(8); e.agregar_nota(9); e.promedio() == 8.5"
            },
            {
              "enunciado": "Crea una clase llamada 'Circulo' con atributo 'radio' y métodos 'area' y 'perimetro' que calculen el área y perímetro del círculo.",
              "test": "c = Circulo(3); abs(c.area() - 28.274) < 0.1 and abs(c.perimetro() - 18.85) < 0.1"
            },
            {
              "enunciado": "Crea una clase llamada 'Libro' con atributos 'titulo', 'autor' y 'anio_publicacion', y un método 'informacion' que retorne un string con todos los datos.",
              "test": "l = Libro('Python', 'Guido van Rossum', 1991); 'Python' in l.informacion() and '1991' in l.informacion()"
            },
            {
              "enunciado": "Crea una clase llamada 'CuentaBancaria' con atributos 'titular', 'saldo' y métodos 'depositar', 'retirar' y 'consultar_saldo'.",
              "test": "c = CuentaBancaria('Juan', 1000); c.depositar(500); c.retirar(200); c.consultar_saldo() == 1300"
            },
            {
              "enunciado": "Crea una clase llamada 'Producto' con atributos 'nombre', 'precio', 'stock' y métodos 'actualizar_precio', 'vender' y 'reponer_stock'.",
              "test": "p = Producto('Laptop', 1000, 5); p.vender(2); p.stock == 3 and p.reponer_stock(10); p.stock == 13"
            },
            {
              "enunciado": "Crea una clase llamada 'Empleado' con atributos 'nombre', 'cargo', 'salario' y métodos 'aumentar_salario', 'cambiar_cargo' y 'mostrar_info'.",
              "test": "e = Empleado('Ana', 'Desarrollador', 5000); e.aumentar_salario(10); e.salario == 5500 and 'Ana' in e.mostrar_info()"
            },
            {
              "enunciado": "Crea una clase llamada 'Vehiculo' con atributos 'marca', 'modelo', 'anio', 'kilometraje' y métodos 'conducir', 'mantenimiento' y 'valor_actual'.",
              "test": "v = Vehiculo('Toyota', 'Corolla', 2020, 50000); v.conducir(1000); v.kilometraje == 51000 and v.valor_actual() > 0"
            },
            {
              "enunciado": "Crea una clase llamada 'Biblioteca' con atributos 'nombre', 'libros' (lista) y métodos 'agregar_libro', 'buscar_libro', 'prestar_libro' y 'devolver_libro'.",
              "test": "b = Biblioteca('Central'); l = Libro('Python', 'Autor', 2020); b.agregar_libro(l); b.buscar_libro('Python') == l and len(b.libros) == 1"
            }
          ]
        },
        {
          "nombre": "Herencia",
          "teoria": "La herencia permite crear clases que heredan atributos y métodos de otras clases. Esto promueve la reutilización de código y la organización jerárquica.",
          "ejercicios": [
            {
              "enunciado": "Crea una clase base llamada 'Animal' con atributo 'nombre' y método 'hacer_sonido'. Luego crea una clase 'Perro' que herede de 'Animal' y sobrescriba 'hacer_sonido' para retornar 'Guau'.",
              "test": "p = Perro('Rex'); p.nombre == 'Rex' and p.hacer_sonido() == 'Guau'"
            },
            {
              "enunciado": "Crea una clase base llamada 'Vehiculo' con atributos 'marca' y 'modelo'. Luego crea una clase 'Coche' que herede de 'Vehiculo' y agregue el atributo 'color'.",
              "test": "c = Coche('Toyota', 'Corolla', 'rojo'); c.marca == 'Toyota' and c.color == 'rojo'"
            },
            {
              "enunciado": "Crea una clase base llamada 'Empleado' con atributos 'nombre' y 'salario'. Luego crea una clase 'Gerente' que herede de 'Empleado' y agregue un método 'bonificacion' que retorne el 20% del salario.",
              "test": "g = Gerente('María', 5000); g.nombre == 'María' and g.bonificacion() == 1000"
            },
            {
              "enunciado": "Crea una clase base llamada 'Forma' con método 'area'. Luego crea clases 'Triangulo' y 'Rectangulo' que hereden de 'Forma' e implementen 'area' de manera diferente.",
              "test": "t = Triangulo(3, 4); r = Rectangulo(5, 6); t.area() == 6 and r.area() == 30"
            },
            {
              "enunciado": "Crea una clase base llamada 'Persona' con atributos 'nombre' y 'edad'. Luego crea clases 'Estudiante' y 'Profesor' que hereden de 'Persona' y agreguen atributos específicos.",
              "test": "e = Estudiante('Juan', 20, 'Informática'); p = Profesor('Ana', 35, 'Matemáticas'); e.carrera == 'Informática' and p.materia == 'Matemáticas'"
            },
            {
              "enunciado": "Crea una clase base llamada 'Cuenta' con atributos 'titular' y 'saldo'. Luego crea clases 'CuentaCorriente' y 'CuentaAhorro' que hereden de 'Cuenta' con diferentes comportamientos.",
              "test": "cc = CuentaCorriente('Juan', 1000); ca = CuentaAhorro('Ana', 2000); cc.retirar(1500) == True and ca.retirar(1500) == False"
            },
            {
              "enunciado": "Crea una clase base llamada 'Producto' con atributos 'nombre' y 'precio'. Luego crea clases 'ProductoFisico' y 'ProductoDigital' que hereden de 'Producto'.",
              "test": "pf = ProductoFisico('Libro', 25, 0.5); pd = ProductoDigital('Ebook', 15, 'PDF'); pf.peso == 0.5 and pd.formato == 'PDF'"
            },
            {
              "enunciado": "Crea una clase base llamada 'Instrumento' con método 'tocar'. Luego crea clases 'Guitarra', 'Piano' y 'Violin' que hereden de 'Instrumento'.",
              "test": "g = Guitarra(6); p = Piano(88); v = Violin(); g.cuerdas == 6 and p.teclas == 88 and 'tocar' in dir(v)"
            },
            {
              "enunciado": "Crea una clase base llamada 'Animal' con método 'mover'. Luego crea clases 'Ave', 'Pez' y 'Mamifero' que hereden de 'Animal' con diferentes formas de movimiento.",
              "test": "a = Ave('Águila'); p = Pez('Salmón'); m = Mamifero('León'); 'volar' in a.mover() and 'nadar' in p.mover() and 'caminar' in m.mover()"
            },
            {
              "enunciado": "Crea una clase base llamada 'Empleado' con método 'calcular_salario'. Luego crea clases 'EmpleadoTiempoCompleto', 'EmpleadoMedioTiempo' y 'EmpleadoPorHora' que hereden de 'Empleado'.",
              "test": "etc = EmpleadoTiempoCompleto('Juan', 5000); emt = EmpleadoMedioTiempo('Ana', 2500); eph = EmpleadoPorHora('Carlos', 20); etc.calcular_salario() == 5000 and eph.calcular_salario(40) == 800"
            }
          ]
        },
        {
          "nombre": "Polimorfismo",
          "teoria": "El polimorfismo permite que diferentes clases respondan de manera diferente al mismo método. Esto se logra sobrescribiendo métodos en las clases hijas.",
          "ejercicios": [
            {
              "enunciado": "Crea una clase base 'Forma' con método 'area'. Luego crea clases 'Circulo' y 'Cuadrado' que hereden de 'Forma' e implementen 'area' de manera diferente.",
              "test": "c = Circulo(5); cu = Cuadrado(4); isinstance(c.area(), (int, float)) and isinstance(cu.area(), (int, float))"
            },
            {
              "enunciado": "Crea una clase base 'Instrumento' con método 'tocar'. Luego crea clases 'Guitarra' y 'Piano' que hereden e implementen 'tocar' retornando diferentes sonidos.",
              "test": "g = Guitarra(); p = Piano(); 'guitarra' in g.tocar().lower() and 'piano' in p.tocar().lower()"
            },
            {
              "enunciado": "Crea una clase base 'Animal' con método 'hacer_sonido'. Luego crea clases 'Perro', 'Gato' y 'Pajaro' que implementen 'hacer_sonido' de manera diferente.",
              "test": "p = Perro(); g = Gato(); pa = Pajaro(); 'guau' in p.hacer_sonido().lower() and 'miau' in g.hacer_sonido().lower() and 'pio' in pa.hacer_sonido().lower()"
            },
            {
              "enunciado": "Crea una clase base 'Vehiculo' con método 'acelerar'. Luego crea clases 'Coche', 'Moto' y 'Bicicleta' que implementen 'acelerar' con diferentes velocidades.",
              "test": "c = Coche(); m = Moto(); b = Bicicleta(); c.acelerar() > m.acelerar() and m.acelerar() > b.acelerar()"
            },
            {
              "enunciado": "Crea una clase base 'Empleado' con método 'calcular_bonificacion'. Luego crea clases 'Vendedor', 'Gerente' y 'Desarrollador' que implementen diferentes bonificaciones.",
              "test": "v = Vendedor(1000); g = Gerente(5000); d = Desarrollador(4000); v.calcular_bonificacion() > 0 and g.calcular_bonificacion() > v.calcular_bonificacion()"
            },
            {
              "enunciado": "Crea una clase base 'Producto' con método 'calcular_precio_final'. Luego crea clases 'ProductoFisico', 'ProductoDigital' y 'Servicio' con diferentes cálculos.",
              "test": "pf = ProductoFisico(100, 10); pd = ProductoDigital(50); s = Servicio(200, 0.15); pf.calcular_precio_final() > 100 and pd.calcular_precio_final() == 50"
            },
            {
              "enunciado": "Crea una clase base 'Notificacion' con método 'enviar'. Luego crea clases 'Email', 'SMS' y 'Push' que implementen diferentes formas de envío.",
              "test": "e = Email('usuario@test.com'); s = SMS('+1234567890'); p = Push('device_id'); 'email' in e.enviar().lower() and 'sms' in s.enviar().lower()"
            },
            {
              "enunciado": "Crea una clase base 'Pago' con método 'procesar'. Luego crea clases 'PagoEfectivo', 'PagoTarjeta' y 'PagoTransferencia' con diferentes procesos.",
              "test": "pe = PagoEfectivo(100); pt = PagoTarjeta(100, '1234-5678'); ptr = PagoTransferencia(100, 'ES91'); 'efectivo' in pe.procesar().lower() and 'tarjeta' in pt.procesar().lower()"
            },
            {
              "enunciado": "Crea una clase base 'Compresion' con método 'comprimir'. Luego crea clases 'CompresionZIP', 'CompresionRAR' y 'Compresion7Z' con diferentes algoritmos.",
              "test": "cz = CompresionZIP('archivo.txt'); cr = CompresionRAR('archivo.txt'); c7 = Compresion7Z('archivo.txt'); 'zip' in cz.comprimir().lower() and 'rar' in cr.comprimir().lower()"
            },
            {
              "enunciado": "Crea una clase base 'Autenticacion' con método 'validar'. Luego crea clases 'AutenticacionUsuario', 'AutenticacionToken' y 'AutenticacionBiometrica' con diferentes validaciones.",
              "test": "au = AutenticacionUsuario('admin', 'password'); at = AutenticacionToken('token123'); ab = AutenticacionBiometrica('huella'); au.validar() == True and at.validar() == True"
            }
          ]
        },
        {
          "nombre": "Encapsulamiento",
          "teoria": "El encapsulamiento protege los datos y métodos de una clase. En Python se usa convención de nombres: _atributo (protegido) y __atributo (privado).",
          "ejercicios": [
            {
              "enunciado": "Crea una clase 'CuentaBancaria' con atributo privado '__saldo' y métodos públicos 'depositar' y 'obtener_saldo'.",
              "test": "c = CuentaBancaria(1000); c.depositar(500); c.obtener_saldo() == 1500"
            },
            {
              "enunciado": "Crea una clase 'Producto' con atributo protegido '_precio' y métodos 'cambiar_precio' y 'mostrar_precio'.",
              "test": "p = Producto('Laptop', 1000); p.cambiar_precio(1200); p.mostrar_precio() == 1200"
            },
            {
              "enunciado": "Crea una clase 'Estudiante' con atributos privados '__notas' y '__promedio', y métodos públicos para agregar notas y calcular promedio.",
              "test": "e = Estudiante('Juan'); e.agregar_nota(8); e.agregar_nota(9); e.calcular_promedio() == 8.5"
            },
            {
              "enunciado": "Crea una clase 'Empleado' con atributos protegidos '_salario' y '_bonificaciones', y métodos públicos para gestionar salarios.",
              "test": "e = Empleado('Ana', 5000); e.aumentar_salario(10); e.agregar_bonificacion(500); e.obtener_salario_total() > 5000"
            },
            {
              "enunciado": "Crea una clase 'Vehiculo' con atributos privados '__kilometraje' y '__mantenimientos', y métodos públicos para gestionar el estado del vehículo.",
              "test": "v = Vehiculo('Toyota', 50000); v.conducir(1000); v.realizar_mantenimiento('Cambio de aceite'); v.obtener_estado() == 'Bueno'"
            },
            {
              "enunciado": "Crea una clase 'Biblioteca' con atributos protegidos '_libros' y '_usuarios', y métodos públicos para gestionar préstamos.",
              "test": "b = Biblioteca(); l = Libro('Python', 'Autor', 2020); b.agregar_libro(l); b.prestar_libro('Python', 'Juan'); b.obtener_libros_prestados() == 1"
            },
            {
              "enunciado": "Crea una clase 'SistemaInventario' con atributos privados '__productos' y '__transacciones', y métodos públicos para gestionar inventario.",
              "test": "si = SistemaInventario(); si.agregar_producto('Laptop', 10); si.vender_producto('Laptop', 3); si.obtener_stock('Laptop') == 7"
            },
            {
              "enunciado": "Crea una clase 'SistemaAutenticacion' con atributos protegidos '_usuarios' y '_sesiones', y métodos públicos para gestionar autenticación.",
              "test": "sa = SistemaAutenticacion(); sa.registrar_usuario('admin', 'password'); sa.iniciar_sesion('admin', 'password') == True"
            },
            {
              "enunciado": "Crea una clase 'SistemaNotificaciones' con atributos privados '__configuracion' y '__historial', y métodos públicos para enviar notificaciones.",
              "test": "sn = SistemaNotificaciones(); sn.configurar_canal('email', 'smtp.gmail.com'); sn.enviar_notificacion('Mensaje de prueba'); len(sn.obtener_historial()) > 0"
            },
            {
              "enunciado": "Crea una clase 'SistemaLogs' con atributos protegidos '_nivel_log' y '_archivos_log', y métodos públicos para gestionar logs de aplicación.",
              "test": "sl = SistemaLogs(); sl.configurar_nivel('INFO'); sl.registrar_log('INFO', 'Aplicación iniciada'); sl.obtener_logs_recientes() > 0"
            }
          ]
        },
        {
          "nombre": "Magic Methods",
          "teoria": "Los Magic Methods (métodos especiales) permiten definir cómo se comportan los objetos con operadores como +, -, ==, etc. Empiezan y terminan con doble guión bajo.",
          "ejercicios": [
            {
              "enunciado": "Crea una clase llamada 'Punto' con atributos 'x' e 'y'. Implementa el método '__str__' para que retorne 'Punto(x, y)'.",
              "test": "p = Punto(3, 4); str(p) == 'Punto(3, 4)'"
            },
            {
              "enunciado": "Crea una clase llamada 'Fraccion' con atributos 'numerador' y 'denominador'. Implementa '__eq__' para comparar fracciones.",
              "test": "f1 = Fraccion(1, 2); f2 = Fraccion(2, 4); f1 == f2"
            },
            {
              "enunciado": "Crea una clase 'Vector' con atributos 'x' e 'y'. Implementa '__add__' para sumar vectores.",
              "test": "v1 = Vector(1, 2); v2 = Vector(3, 4); v3 = v1 + v2; v3.x == 4 and v3.y == 6"
            },
            {
              "enunciado": "Crea una clase 'Matriz' con atributos 'filas' y 'columnas'. Implementa '__mul__' para multiplicar matrices.",
              "test": "m1 = Matriz([[1,2],[3,4]]); m2 = Matriz([[5,6],[7,8]]); m3 = m1 * m2; isinstance(m3, Matriz)"
            },
            {
              "enunciado": "Crea una clase 'Complejo' con atributos 'real' e 'imaginario'. Implementa '__add__', '__sub__' y '__mul__' para operaciones con números complejos.",
              "test": "c1 = Complejo(3, 4); c2 = Complejo(1, 2); c3 = c1 + c2; c3.real == 4 and c3.imaginario == 6"
            },
            {
              "enunciado": "Crea una clase 'ListaPersonalizada' que herede de list. Implementa '__len__', '__getitem__' y '__setitem__' para comportamiento personalizado.",
              "test": "lp = ListaPersonalizada([1,2,3]); len(lp) == 3 and lp[0] == 1 and lp[0] == 10; lp[0] == 10"
            },
            {
              "enunciado": "Crea una clase 'DiccionarioPersonalizado' que herede de dict. Implementa '__getitem__', '__setitem__' y '__delitem__' con validaciones.",
              "test": "dp = DiccionarioPersonalizado(); dp['clave'] = 'valor'; dp['clave'] == 'valor' and 'clave' in dp"
            },
            {
              "enunciado": "Crea una clase 'ConjuntoPersonalizado' que herede de set. Implementa '__contains__', '__add__' y '__sub__' para operaciones de conjunto.",
              "test": "cp1 = ConjuntoPersonalizado([1,2,3]); cp2 = ConjuntoPersonalizado([3,4,5]); cp3 = cp1 + cp2; len(cp3) == 5"
            },
            {
              "enunciado": "Crea una clase 'IteradorPersonalizado' que implemente '__iter__' y '__next__' para crear un iterador que genere números pares.",
              "test": "ip = IteradorPersonalizado(10); numeros = list(ip); numeros == [0,2,4,6,8]"
            },
            {
              "enunciado": "Crea una clase 'ContextoPersonalizado' que implemente '__enter__' y '__exit__' para crear un context manager que mida el tiempo de ejecución.",
              "test": "with ContextoPersonalizado() as cp: pass; isinstance(cp.tiempo_ejecucion, (int, float))"
            }
          ]
        },
        {
          "nombre": "Juego de Consola",
          "teoria": "Práctica final: Crea un juego simple de consola aplicando todos los conceptos de POO aprendidos. Usa clases, herencia, polimorfismo y encapsulamiento.",
          "ejercicios": [
            {
              "enunciado": "Crea un juego simple de 'Adivina el Número'. Crea una clase 'Juego' con método 'jugar' que genere un número aleatorio entre 1 y 100 y permita al usuario adivinarlo.",
              "test": "j = Juego(); isinstance(j, Juego) and hasattr(j, 'jugar')"
            },
            {
              "enunciado": "Crea una clase 'Jugador' con atributos 'nombre' e 'intentos'. Luego crea una clase 'JuegoAdivinanza' que use 'Jugador' y tenga método 'iniciar_juego'.",
              "test": "j = JuegoAdivinanza(); j.iniciar_juego('Juan'); j.jugador.nombre == 'Juan' and j.jugador.intentos == 0"
            },
            {
              "enunciado": "Crea un juego de 'Piedra, Papel o Tijera'. Crea clases 'Jugador', 'JuegoPPT' y 'Ronda' que manejen la lógica del juego.",
              "test": "j = JuegoPPT(); j.agregar_jugador('Juan'); j.agregar_jugador('Ana'); len(j.jugadores) == 2 and hasattr(j, 'jugar_ronda')"
            },
            {
              "enunciado": "Crea un juego de 'Ahorcado'. Crea clases 'Palabra', 'JugadorAhorcado' y 'JuegoAhorcado' con métodos para gestionar el juego.",
              "test": "j = JuegoAhorcado('PYTHON'); j.palabra.palabra == 'PYTHON' and j.intentos_restantes == 6 and hasattr(j, 'adivinar_letra')"
            },
            {
              "enunciado": "Crea un juego de 'Tres en Raya'. Crea clases 'Tablero', 'JugadorTresEnRaya' y 'JuegoTresEnRaya' con lógica para el juego.",
              "test": "j = JuegoTresEnRaya(); j.tablero.obtener_celda(0, 0) == ' ' and hasattr(j, 'hacer_movimiento') and hasattr(j, 'verificar_ganador')"
            },
            {
              "enunciado": "Crea un juego de 'Memoria'. Crea clases 'Carta', 'TableroMemoria' y 'JuegoMemoria' para un juego de cartas de memoria.",
              "test": "j = JuegoMemoria(4); len(j.tablero.cartas) == 16 and hasattr(j, 'voltear_carta') and hasattr(j, 'verificar_par')"
            },
            {
              "enunciado": "Crea un juego de 'Snake'. Crea clases 'Serpiente', 'Comida' y 'JuegoSnake' para el clásico juego de la serpiente.",
              "test": "j = JuegoSnake(10, 10); j.serpiente.posicion == [(5, 5)] and hasattr(j, 'mover') and hasattr(j, 'generar_comida')"
            },
            {
              "enunciado": "Crea un juego de 'Tetris'. Crea clases 'Pieza', 'TableroTetris' y 'JuegoTetris' con diferentes tipos de piezas.",
              "test": "j = JuegoTetris(10, 20); j.pieza_actual is not None and hasattr(j, 'rotar_pieza') and hasattr(j, 'mover_pieza')"
            },
            {
              "enunciado": "Crea un juego de 'Batalla Naval'. Crea clases 'Barco', 'TableroBatalla' y 'JuegoBatallaNaval' para el juego de hundir barcos.",
              "test": "j = JuegoBatallaNaval(); len(j.tablero.barcos) > 0 and hasattr(j, 'disparar') and hasattr(j, 'verificar_hundido')"
            },
            {
              "enunciado": "Crea un juego de 'Laberinto'. Crea clases 'Laberinto', 'JugadorLaberinto' y 'JuegoLaberinto' para navegar por un laberinto.",
              "test": "j = JuegoLaberinto(5, 5); j.laberinto.obtener_celda(0, 0) in ['#', ' '] and hasattr(j, 'mover_jugador') and hasattr(j, 'verificar_victoria')"
            }
          ]
        }
      ]
    },
    {
      "nombre": "Módulo 5 - Cierre del Curso",
      "descripcion": "Despedida y evaluación integral de los conocimientos adquiridos en todo el curso de Python",
      "temas": [
        {
          "nombre": "Evaluación de Estructuras de Datos",
          "teoria": "Demuestra tu dominio de las estructuras de datos de Python: strings, listas, tuplas, conjuntos y diccionarios.",
          "ejercicios": [
            {
              "enunciado": "Crea una función 'procesar_datos' que reciba una lista de nombres y retorne un diccionario con el nombre como clave y la longitud del nombre como valor.",
              "test": "nombres = ['Ana', 'Juan', 'María']; resultado = procesar_datos(nombres); resultado == {'Ana': 3, 'Juan': 4, 'María': 5}"
            },
            {
              "enunciado": "Crea una función 'filtrar_pares' que reciba una lista de números y retorne una tupla con solo los números pares.",
              "test": "numeros = [1, 2, 3, 4, 5, 6]; resultado = filtrar_pares(numeros); resultado == (2, 4, 6)"
            },
            {
              "enunciado": "Crea una función 'contar_vocales' que reciba un texto y retorne un diccionario con el conteo de cada vocal.",
              "test": "texto = 'hola mundo'; resultado = contar_vocales(texto); resultado['o'] == 2 and resultado['a'] == 1"
            }
          ]
        },
        {
          "nombre": "Evaluación de Funciones",
          "teoria": "Demuestra tu comprensión de funciones, recursión, lambdas y manejo de excepciones.",
          "ejercicios": [
            {
              "enunciado": "Crea una función recursiva 'invertir_lista' que reciba una lista y retorne la lista invertida.",
              "test": "lista = [1, 2, 3, 4]; resultado = invertir_lista(lista); resultado == [4, 3, 2, 1]"
            },
            {
              "enunciado": "Crea una función lambda 'es_palindromo' que reciba un texto y retorne True si es palíndromo, False en caso contrario.",
              "test": "es_palindromo('ana') == True and es_palindromo('python') == False"
            },
            {
              "enunciado": "Crea una función 'dividir_lista' que reciba una lista y un divisor, y retorne la división de cada elemento. Maneja la excepción de división por cero.",
              "test": "lista = [10, 20, 30]; resultado = dividir_lista(lista, 2); resultado == [5.0, 10.0, 15.0]"
            }
          ]
        },
        {
          "nombre": "Evaluación de POO",
          "teoria": "Demuestra tu dominio de Programación Orientada a Objetos: clases, herencia, polimorfismo y encapsulamiento.",
          "ejercicios": [
            {
              "enunciado": "Crea una clase 'Biblioteca' con lista de libros y métodos 'agregar_libro' y 'buscar_libro'. Luego crea una clase 'Libro' con atributos 'titulo' y 'autor'.",
              "test": "b = Biblioteca(); l = Libro('Python', 'Autor'); b.agregar_libro(l); b.buscar_libro('Python') == l"
            },
            {
              "enunciado": "Crea una clase base 'Figura' con método 'area'. Luego crea clases 'Triangulo' y 'Rectangulo' que hereden e implementen 'area'.",
              "test": "t = Triangulo(3, 4); r = Rectangulo(5, 6); t.area() == 6 and r.area() == 30"
            },
            {
              "enunciado": "Crea una clase 'Cuenta' con atributo privado '__saldo' y métodos 'depositar', 'retirar' y 'consultar_saldo'. Implementa validaciones.",
              "test": "c = Cuenta(1000); c.depositar(500); c.retirar(200); c.consultar_saldo() == 1300"
            }
          ]
        },
        {
          "nombre": "Proyecto Final Integrador",
          "teoria": "Proyecto final que integra todos los conocimientos del curso: estructuras de datos, funciones, POO y manejo de excepciones.",
          "ejercicios": [
            {
              "enunciado": "Crea un sistema de gestión de estudiantes. Crea una clase 'Estudiante' con nombre, notas y métodos para calcular promedio. Luego crea una clase 'SistemaEducativo' que maneje una lista de estudiantes.",
              "test": "s = SistemaEducativo(); e = Estudiante('Juan'); e.agregar_nota(8); e.agregar_nota(9); s.agregar_estudiante(e); s.obtener_promedio_general() > 0"
            },
            {
              "enunciado": "Crea una función 'generar_reporte' que reciba una lista de estudiantes y retorne un diccionario con estadísticas: total_estudiantes, promedio_general, mejor_estudiante.",
              "test": "estudiantes = []; resultado = generar_reporte(estudiantes); 'total_estudiantes' in resultado and 'promedio_general' in resultado"
            },
            {
              "enunciado": "Implementa manejo de excepciones en el sistema: validar que las notas estén entre 0 y 10, que los nombres no estén vacíos, y que no se dupliquen estudiantes.",
              "test": "e = Estudiante('Ana'); try: e.agregar_nota(15); except: pass; e.notas == [] or max(e.notas) <= 10"
            }
          ]
        }
      ]
    }
  ]
}